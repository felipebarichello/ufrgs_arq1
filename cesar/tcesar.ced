; --- STARTUP ---

	mov #stack, r6
	jsr r7, __main
	hlt


;+=================================================================================================+


;VARIÁVEIS

debug_warning: DAW 'ATENCAO: MODO DEBUG ATIVADO', 0
secret_word: DAW [37] ;Palavra secreta
lives: DAW [3] ;Número de vidas, em ASCII. Deixar em ASCII é mais otimizado para imprimir no display.
clock: DW ;Quantos ticks de 250ms se passaram desde o início do jogo
;[DEBUG]
DW 0
;[/DEBUG]
input_buf: DAW [37] ;Buffer de input genérico
txt_press_any_1: DAW 'Pressione qualquer tecla para', 0
txt_press_any_2: DAW 'continuar quando o icone a direita', 0
txt_press_any_3: DAW 'estiver presente', 0
txt_welcome: DAW 'Bem-vindo(a) a Iulius Caesar', 0
txt_enter_word: DAW 'Insira a palavra secreta', 0
txt_enter_word_prompt: DAW 'Palavra: ', 0
txt_enter_lives: DAW 'Quantas vidas (1-99): ', 0
txt_enter_lives_invalid: DAW 'Valor invalido!', 0


;PROGRAMA

__main:
	jsr r7, _stdio_init

	;[DEBUG]
	mov #debug_warning, r2
	jsr r7, _print_and_wait

	mov #'D', #secret_word
	mov #'e', #secret_word+2
	mov #'B', #secret_word+4
	mov #'u', #secret_word+6
	mov #'G', #secret_word+8
	mov #0, #secret_word+10

	mov #'0', lives
	mov #'7', lives+2
	mov #0, lives+4

	jmp game_start
	;[/DEBUG]

	mov #txt_press_any_1, r2
	jsr r7, _print_and_wait

	mov #txt_press_any_2, r2
	jsr r7, _print_and_wait

	mov #txt_press_any_3, r2
	jsr r7, _print_and_wait

	mov #txt_welcome, r2
	jsr r7, _print_and_wait

	mov #txt_enter_word, r2
	jsr r7, _print_and_wait

enter_word_prompt:
	mov #txt_enter_word_prompt, r2
	jsr r7, _stdio_print
	jsr r7, _stdio_in
	mov #secret_word, r3
	jsr r7, _stdio_input_flush
	jsr r7, _str_to_upper

enter_lives_loop:
	jsr r7, _stdio_clear
	mov #txt_enter_lives, r2
	jsr r7, _stdio_print
	jsr r7, _stdio_in
	mov #input_buf, r3
	jsr r7, _stdio_input_flush
	jsr r7, _set_lives
	bne game_start

 	;Erro parseando o número de vidas
	jsr r7, _stdio_clear
	mov #txt_enter_lives_invalid, r2
	jsr r7, _stdio_print
	jsr r7, _stdio_anykey
	jmp enter_lives_loop

game_start:
	jsr r7, _stdio_clear
	
	;Iniciar o timer com interrupção
	mov #i_update_timer, ivet
	mov #h81, inte
	mov #250, timdt

game_loop:
	mov #clock, r2

	; ;Multiplicar `clock` por 4, obtendo o tempo em segundos
	asl r2
	asl r2

	;Imprimir o tempo no display
	jsr r7, _str_from_u16
	jsr r7, _stdio_clear
	jsr r7, _stdio_print

	br game_loop

	rts r7


;print_and_wait(buffer r2)
_print_and_wait:
	jsr r7, _stdio_print
	jsr r7, _stdio_anykey
	jsr r7, _stdio_clear
	rts r7


;set_lives(buffer r3)
;Verificar se o buffer cujo endereço inicial está em r3 contém um número de vidas válido.
;Preenche as vidas em `lives` caso seja válido.
;Retorna 1 caso seja válido, 0 caso contrário.
_set_lives:
	mov (r3)+, r4
	beq set_lives_false
	mov #2, r5 ;No máximo 2 dígitos

set_lives_loop:
	cmp r4, #'9'
	bhi set_lives_false ;Caractere não é um dígito
	cmp r4, #'0'
	bcs set_lives_false ;Caractere não é um dígito

	;Caractere é um dígito
	;Novo caractere
	mov (r3)+, r4
	beq set_lives_end
	sob r5, set_lives_loop
	jmp set_lives_false ;Mais de 2 dígitos

set_lives_end:
	dec r2
	bne set_lives_padding

	;Dois dígitos
	mov -6(r3), lives
	jmp set_lives_second_digit

set_lives_padding:
	;Um dígito. Adicionar um zero à esquerda
	mov #'0', lives

set_lives_second_digit:
	mov -4(r3), lives+2

	;Verificar se não é 0
	cmp lives+2, #'0'
	bne set_lives_true
	cmp lives, #'0'
	beq set_lives_false

set_lives_true:
	mov #1, r1
	rts r7

set_lives_false:
	clr r1
	rts r7


;Iupdate_timer()
;Interrupção do timer.
i_update_timer:
	mov #250, timdt
	inc clock
	and #hFFFE, ints
	rti


;+=================================================================================================+
;|                                                                                                 |
;|                                         BIBLIOTECAS                                             |
;|       																				           |
;+-------------------------------------------------------------------------------------------------+

; <str>


str_masks_desc: DAW hF000, h0F00, h00F0, h000F ;Máscaras de 4 bits em sequência


;str_to_upper(buffer r3)
;Converter a null-terminated string do buffer cujo endereço inicial está em r3 para maiúsculas.
_str_to_upper:
	mov r3, r2

str_to_upper_loop:
	mov (r2)+, r4
	beq str_to_upper_end
	cmp r4, #'a'
	bcs str_to_upper_loop

	cmp r4, #'z'
	bhi str_to_upper_loop

	;r4 contém um caractere minúsculo
	;Converter para maiúsculo
	add #-32, r4 ;'A' - 'a' = -32
	mov r4, -2(r2)
	jmp str_to_upper_loop

str_to_upper_end:
	rts r7


;str_to_lower(buffer r3)
;Converter a null-terminated string do buffer cujo endereço inicial está em r3 para minúsculas.
_str_to_lower:
	mov r3, r2

str_to_lower_loop:
	mov (r2)+, r4
	beq str_to_lower_end
	cmp r4, #'A'
	bcs str_to_lower_loop

	cmp r4, #'Z'
	bhi str_to_lower_loop

	;r4 contém um caractere maiúsculo
	;Converter para minúsculo
	add #32, r4 ;'a' - 'A' = 32
	mov r4, -2(r2)
	jmp str_to_lower_loop

str_to_lower_end:
	rts r7


;str_from_u16(u16[6] r1, string r2)
;Converte o inteiro unsigned para null-terminated string
_str_from_u16:
	add #5, r2 ;r2 agora aponta para o último caractere da string
	mov #4, r5 ;Iterador. 4 máscaras.
	mov #'0', r1 ;"Limpar" o último dígito da string. O loop requer que ele esteja já com '1' ou '0'.

str_from_u16_loop:
	;Converter 4 bits para BCD
	mov r1, r4
	and str_masks_desc-1(r5), r4 ;Começa com a máscara menos significativa

	;Executar o str_from_u16_digit 4 * r5 vezes
	mov r5, r3
	ccc C
	rol r3
	rol r3

str_from_u16_digit:
	;Converter por exemplo 01010000 para 00000101
	ror r4
	sob r3, str_from_u16_digit
	rol r4

	
	cmp r4, #9
	bcs str_from_u16_skip_normalize ;Se for menor que 9, só não normaliza
	bhi str_from_u16_normalize ;Se maior que 9, precisa ser normalizado

	;Se for 9, pode somar 1 do carry anterior e somar 10
	cmp (r2), '0' ;O dígito final será 9
	beq str_from_u16_skip_normalize ;Carry

str_from_u16_normalize:
	;É maior que 9. Normalizar.
	;Suponha por exemplo que r4 = 12
	sub #10, r4      ;Agora r4 é 2
	mov #'1', -2(r2) ;E o próximo dígito será 1
	
	add r4, (r2) ;Adicionar o valor do dígito atual na string já em BCD	

str_from_u16_skip_normalize:
	sob r5, str_from_u16_loop
	rts r7

;+-------------------------------------------------------------------------------------------------+

; <stdio>


stdio_text_end:    DW ;Endereço de memória do primeiro byte vazio do display
stdio_input_start: DW ;Endereço de memória do primeiro byte do display que contém input do usuário


;stdio_init()
;Inicializar o display e o teclado.
_stdio_init:
	mov #0, #stdio_text_end ;Mandar limpar o display inteiro
	jsr r7, _stdio_clear   ;Limpar o display
	rts r7


;stdio_print(buffer r2)
;Imprimir a null-terminated string do buffer cujo endereço inicial está em r2 no display.
;Continua o texto anterior caso não tenha sido limpo.
_stdio_print:
	mov stdio_text_end, r5

stdio_print_loop:
	cmp r5, #display+35
	bgt stdio_print_end ;Para caso o display esteja cheio
	mov (r2)+, r4
	beq stdio_print_end ;Para caso o texto tenha terminado
	mov r4, (r5)
	inc r5
	jmp stdio_print_loop

stdio_print_end:
	mov r5, stdio_text_end
	rts r7


;stdio_clear()
;Limpar o display.
_stdio_clear:
	mov stdio_text_end, r5
	sub #display, r5 ;r5 agora contém o offset do último byte com texto do display
	ble stdio_clear_end ;Caso o display já esteja vazio, terminar
	
stdio_clear_loop:
	clr 65499(r5) ;Por algum motivo, escrever `display-1(r5)` não funciona
	sob r5, stdio_clear_loop
	mov #display, stdio_text_end

stdio_clear_end:
	rts r7


;stdio_free()
;Virtualmente limpar o display sem alterar o conteúdo do display.
;É mais otimizado que `stdio_clear` pois não precisa escrever no display.
;Deve ser usado quando o conteúdo do display será sobrescrito.
_stdio_free:
	mov #display, stdio_text_end
	rts r7


;stdio_in()
;Receber input do usuário até `return` ser pressionado.
;Usar `_stdio_input_flush` para armazenar o conteúdo do display em um buffer
_stdio_in:
	clr tecst
	mov stdio_text_end, r5
	mov r5, stdio_input_start
	mov #255, timdt
	clr r1

stdio_in_cursor:
	clr ints

	;Caso o display esteja cheio, não tenta desenhar o cursor
	;`bgt` em vez de `bhi` por causa do overflow
	cmp r5, #display+35
	bgt stdio_in_read

	tst r1
	bne stdio_in_cursor_hide

	mov #'|', (r5)
	inc r1
	jmp stdio_in_read

stdio_in_cursor_hide:
	clr (r5)
	dec r1
	jmp stdio_in_read

stdio_in_wait:
	mov ints, r0
	and #h01, r0
	bne stdio_in_cursor

stdio_in_read:
	tst tecst
	beq stdio_in_wait
	mov tecdt, r4
	clr tecst

	cmp r5, #display+35
	bgt stdio_in_skip_clear

	clr (r5)

stdio_in_skip_clear:
stdio_in_backspace:
	cmp r4, #h08 ;Backspace
	bne stdio_in_return

	cmp r5, stdio_input_start
	beq stdio_in_wait
	dec r5
	clr (r5)
	jmp stdio_in_wait

stdio_in_return:
	cmp r4, #h0D ;Return
	bne stdio_in_default

	mov r5, stdio_text_end
	rts r7

;Não é caractere especial. Imprime-o no display.
stdio_in_default:
	cmp r5, #display+35

	;`bgt` em vez de `bhi` por causa do overflow
	bgt stdio_in_wait
	
	mov r4, (r5)
	inc r5
	jmp stdio_in_wait


;stdio_input_flush(buffer r3)
;Armazenar o conteúdo do display no buffer cujo endereço inicial está em r3 e limpar o display.
_stdio_input_flush:
	mov r3, r2
	mov stdio_input_start, r4 ;Iterador
	sub #display, r4 ;r4 agora contém o offset do buffer inicial
	mov #36, r5

;Loop começa em `stdio_input_start` e termina em `stdio_text_end`
stdio_input_flush_loop:
	mov display(r4), (r2)+
	beq stdio_input_flush_end
	clr display(r4)
	inc r4
	cmp r4, r5
	bcs stdio_input_flush_loop ;Quando `r4 = 36`, o buffer está cheio

stdio_input_flush_end:
	mov stdio_input_start, stdio_text_end
	rts r7


;stdio_anykey()
;Pausar o programa até que uma tecla qualquer seja pressionada.
_stdio_anykey:
	mov display+35, r5 ;Guardar o último byte do display
	mov #h3E, display+35 ;Desenhar '>' no último byte do display
	clr tecst

_stdio_anykey_anykey:
	tst tecst
	beq _stdio_anykey_anykey

	mov r5, display+35 ;Recuperar o último byte do display
	
	rts r7




;+-------------------------------------------------------------------------------------------------+
;|                                                                                                 |
;|                                      ENDEREÇOS ESPECIAIS                                        |
;|       																				           |
;+-------------------------------------------------------------------------------------------------+

stack: EQU hFF80 ;Fundo da stack

ORG hFFBE
ivet: DW ;Vetor de interrupção - endereço da ISR (Interrupt Service Routine)

ORG hFFD7
timdt: DB ;(BYTE) Timer base time
ints:  DB ;(BYTE) Interrupt Status - Monitoramento do estado das interrupções
inte:  DB ;(BYTE) Interrupt Enable - Controle de habilitação das interrupções
tecst: DB ;(BYTE) Se o conteúdo deste endereço de memória for h80 então existe tecla disponível
tecdt: DB ;(BYTE) Dado do Teclado - Endereço a ser lido caso exista uma tecla disponível
display: DAB [36] ;(BYTE) 36 bytes do visor
